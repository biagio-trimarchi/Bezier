function [c, ceq] = nlCnstUDyn(x, P1, P2, P3, U1, U2, U3, T1, T2, T3, Co1, Co2, n, m , d, dSafe, Q, Adyn, bdyn)
    ceq(1) = (P1(end)-P1(end-1))*(1-x(1))/T1 - (P2(2)-P2(1))*(x(2))/T2;
    ceq(2) = (P2(end)-P2(end-1))*(1-x(3))/T1 - (P3(2)-P3(1))*(x(4))/T3;
    
    c = 0;
    
    Cx1 = BezierComposition(P1(:, 1), P1(:, 2), P1(:, 3), P1(:, 4), P1(:, 5), P1(:, 6), 0, U1(2), x(1), 1);
    Cx2 = BezierComposition(P1(:, 1), P1(:, 2), P1(:, 3), P1(:, 4), P1(:, 5), P1(:, 6), 0, x(2), x(3), 1);
    
    C1 = reshape(Cx1, d, []);
    diff = C1 - Co1;
    c1 = zeros(2*n*m+1, 1);
    for k = 0:2*n*m
        c1(k+1) = dSafe^2;
        for j = 1:d
            c1(k+1) = c1(k+1) - diff(j, :)*Q(:, :, k+1)*diff(j, :)';
        end
    end
    
    C2 = reshape(Cx1, d, []);
    diff = C2 - Co2;
    c2 = zeros(2*n*m+1, 1);
    for k = 0:2*n*m
        c2(k+1) = dSafe^2;
        for j = 1:d
            c2(k+1) = c2(k+1) - diff(j, :)*Q(:, :, k+1)*diff(j, :)';
        end
    end
    
end